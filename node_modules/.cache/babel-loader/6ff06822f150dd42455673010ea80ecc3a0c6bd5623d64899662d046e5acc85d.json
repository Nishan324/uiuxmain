{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Analytics.\r\n */\nconst ANALYTICS_TYPE = 'analytics';\n// Key to attach FID to in gtag params.\nconst GA_FID_KEY = 'firebase_id';\nconst ORIGIN_KEY = 'origin';\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\nfunction promiseAllSettled(promises) {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\nasync function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\n      const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(\"config\" /* CONFIG */, measurementId, gtagParams);\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\nasync function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n  try {\n    let initializationPromisesToWaitFor = [];\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\n        const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n    }\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(\"event\" /* EVENT */, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  async function gtagWrapper(command, idOrNameOrParams, gtagParams) {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === \"event\" /* EVENT */) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams);\n      } else if (command === \"config\" /* CONFIG */) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams);\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(\"set\" /* SET */, idOrNameOrParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  let gtagCore = function (..._args) {\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\nfunction findGtagScriptOnPage() {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERRORS = {\n  [\"already-exists\" /* ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.',\n  [\"already-initialized\" /* ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-intialized instance.',\n  [\"already-initialized-settings\" /* ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.',\n  [\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [\"fetch-throttle\" /* FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [\"no-api-key\" /* NO_API_KEY */]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.',\n  [\"no-app-id\" /* NO_APP_ID */]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.'\n};\nconst ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\nconst LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\nclass RetryData {\n  constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n  getThrottleMetadata(appId) {\n    return this.throttleMetadata[appId];\n  }\n  setThrottleMetadata(appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  }\n  deleteThrottleMetadata(appId) {\n    delete this.throttleMetadata[appId];\n  }\n}\nconst defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\nasync function fetchDynamicConfig(appFields) {\n  var _a;\n  const {\n    appId,\n    apiKey\n  } = appFields;\n  const request = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = await response.json();\n      if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\nasync function fetchDynamicConfigWithRetry(app,\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\nretryData = defaultRetryData, timeoutMillis) {\n  const {\n    appId,\n    apiKey,\n    measurementId\n  } = app.options;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\n  }\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\n  }\n  const throttleMetadata = retryData.getThrottleMetadata(appId) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n  const signal = new AnalyticsAbortSignal();\n  setTimeout(async () => {\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    signal.abort();\n  }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n  return attemptFetchDynamicConfigWithRetry({\n    appId,\n    apiKey,\n    measurementId\n  }, throttleMetadata, signal, retryData);\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\nasync function attemptFetchDynamicConfigWithRetry(appFields, {\n  throttleEndTimeMillis,\n  backoffCount\n}, signal, retryData = defaultRetryData // for testing\n) {\n  const {\n    appId,\n    measurementId\n  } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`);\n      return {\n        appId,\n        measurementId\n      };\n    }\n    throw e;\n  }\n  try {\n    const response = await fetchDynamicConfig(appFields);\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`);\n        return {\n          appId,\n          measurementId\n        };\n      } else {\n        throw e;\n      }\n    }\n    const backoffMillis = Number(e.customData.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n    return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\n  }\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    const timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\n        throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nclass AnalyticsAbortSignal {\n  constructor() {\n    this.listeners = [];\n  }\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n  abort() {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nasync function validateIndexedDB() {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\n      errorInfo: 'IndexedDB is not available in this environment.'\n    }).message);\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\n        errorInfo: e\n      }).message);\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\nasync function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\n  var _a;\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise.then(config => {\n    measurementIdToAppId[config.measurementId] = config.appId;\n    if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n      logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` + ` does not match the measurement ID fetched from the server (${config.measurementId}).` + ` To ensure analytics events are always sent to the correct Analytics property,` + ` update the` + ` measurement ID field in the local config or remove it from the local config.`);\n    }\n  }).catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n  const fidPromise = validateIndexedDB().then(envIsValid => {\n    if (envIsValid) {\n      return installations.getId();\n    } else {\n      return undefined;\n    }\n  });\n  const [dynamicConfig, fid] = await Promise.all([dynamicConfigPromise, fidPromise]);\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {};\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(\"config\" /* CONFIG */, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Analytics Service class.\r\n */\nclass AnalyticsService {\n  constructor(app) {\n    this.app = app;\n  }\n  _delete() {\n    delete initializationPromisesMap[this.app.options.appId];\n    return Promise.resolve();\n  }\n}\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\nlet initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\nlet dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\nconst measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\nlet dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\nlet gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\nlet gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\nlet wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\nlet globalInitDone = false;\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\nfunction warnOnBrowserContextMismatch() {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages.map((message, index) => `(${index + 1}) ${message}`).join(' ');\n    const err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\nfunction factory(app, installations, options) {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` + ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config.`);\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\n      id: appId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    const {\n      wrappedGtag,\n      gtagCore\n    } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\n  const analyticsInstance = new AnalyticsService(app);\n  return analyticsInstance;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\nasync function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {\n  if (options && options.global) {\n    gtagFunction(\"event\" /* EVENT */, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params = Object.assign(Object.assign({}, eventParams), {\n      'send_to': measurementId\n    });\n    gtagFunction(\"event\" /* EVENT */, eventName, params);\n  }\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\nasync function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {\n  if (options && options.global) {\n    gtagFunction(\"set\" /* SET */, {\n      'screen_name': screenName\n    });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\" /* CONFIG */, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\nasync function setUserId$1(gtagFunction, initializationPromise, id, options) {\n  if (options && options.global) {\n    gtagFunction(\"set\" /* SET */, {\n      'user_id': id\n    });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\" /* CONFIG */, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\nasync function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {\n  if (options && options.global) {\n    const flatProperties = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(\"set\" /* SET */, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(\"config\" /* CONFIG */, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\nasync function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction getAnalytics(app = getApp()) {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n  return initializeAnalytics(app);\n}\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction initializeAnalytics(app, options = {}) {\n  // Dependencies\n  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({\n    options\n  });\n  return analyticsInstance;\n}\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\nasync function isSupported() {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n  try {\n    const isDBOpenable = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));\n}\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\nfunction setUserId(analyticsInstance, id, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));\n}\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\nfunction setUserProperties(analyticsInstance, properties, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));\n}\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));\n}\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\n}\nconst name = \"@firebase/analytics\";\nconst version = \"0.7.0\";\n\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\nfunction registerAnalytics() {\n  _registerComponent(new Component(ANALYTICS_TYPE, (container, {\n    options: analyticsOptions\n  }) => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const installations = container.getProvider('installations-internal').getImmediate();\n    return factory(app, installations, analyticsOptions);\n  }, \"PUBLIC\" /* PUBLIC */));\n  _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\n  registerVersion(name, version);\n  function internalFactory(container) {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics();\nexport { getAnalytics, initializeAnalytics, isSupported, logEvent, setAnalyticsCollectionEnabled, setCurrentScreen, setUserId, setUserProperties, settings };","map":{"version":3,"names":["ANALYTICS_TYPE","GA_FID_KEY","ORIGIN_KEY","FETCH_TIMEOUT_MILLIS","DYNAMIC_CONFIG_URL","GTAG_URL","logger","Logger","promiseAllSettled","promises","Promise","all","map","promise","catch","e","insertScriptTag","dataLayerName","measurementId","script","document","createElement","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","window","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","gtagParams","correspondingAppId","dynamicConfigResults","foundConfig","find","config","appId","error","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","sendToId","initializationPromise","push","length","Object","values","wrapGtag","gtagWrapper","command","idOrNameOrParams","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","ERRORS","ERROR_FACTORY","ErrorFactory","LONG_RETRY_FACTOR","BASE_INTERVAL_MILLIS","RetryData","constructor","throttleMetadata","intervalMillis","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","defaultRetryData","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","request","method","headers","appUrl","replace","response","fetch","status","errorMessage","jsonResponse","json","_a","message","_ignored","create","httpStatus","responseMessage","fetchDynamicConfigWithRetry","app","retryData","timeoutMillis","options","backoffCount","throttleEndTimeMillis","Date","now","signal","AnalyticsAbortSignal","setTimeout","abort","undefined","attemptFetchDynamicConfigWithRetry","setAbortableTimeout","warn","isRetriableError","backoffMillis","Number","customData","calculateBackoffMillis","debug","resolve","reject","Math","max","timeout","addEventListener","clearTimeout","FirebaseError","listeners","listener","forEach","validateIndexedDB","isIndexedDBAvailable","errorInfo","validateIndexedDBOpenable","_initializeAnalytics","installations","dynamicConfigPromise","then","fidPromise","envIsValid","getId","dynamicConfig","fid","configProperties","update","AnalyticsService","_delete","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","settings","warnOnBrowserContextMismatch","mismatchedEnvMessages","isBrowserExtension","areCookiesEnabled","details","index","join","err","factory","id","analyticsInstance","logEvent$1","logEvent","gtagFunction","eventName","eventParams","global","params","assign","setCurrentScreen$1","setCurrentScreen","screenName","setUserId$1","setUserId","setUserProperties$1","setUserProperties","properties","flatProperties","key","keys","setAnalyticsCollectionEnabled$1","setAnalyticsCollectionEnabled","enabled","getAnalytics","getApp","getModularInstance","analyticsProvider","_getProvider","isInitialized","getImmediate","initializeAnalytics","existingInstance","deepEqual","getOptions","initialize","isSupported","isDBOpenable","registerAnalytics","_registerComponent","Component","container","analyticsOptions","getProvider","internalFactory","registerVersion","name","version","analytics","reason"],"sources":["C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\constants.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\logger.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\helpers.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\errors.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\get-config.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\initialize-analytics.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\factory.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\functions.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\api.ts","C:\\Users\\hp\\Desktop\\nishan\\furniture-website\\node_modules\\@firebase\\analytics\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CustomParams, ControlParams, EventParams } from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams\n        );\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    if (!isRetriableError(e)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${e.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(e.customData.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: e\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page.\n  if (!findGtagScriptOnPage()) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/page-view\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n","/**\n * Firebase Analytics\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}